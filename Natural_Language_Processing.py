# -*- coding: utf-8 -*-
"""NLP.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1R6N5ZIHz4uCDc3VywM3XNBAobKChCQoJ
"""

# import library pandas untuk membuat data frame
import pandas as pd
df = pd.read_csv('emails.csv', encoding="ISO-8859-1")

df.tail()

# membagi data menjadi kalimat dalam email dan labelnya
from sklearn.model_selection import train_test_split
kalimat = df['text'].values
label = df['spam'].values
# membagi data menjadi data latih dan data test
kalimat_latih, kalimat_test, label_latih, label_test = train_test_split(kalimat, label, test_size=0.2)

# melihat contoh kalimat dalam email
print(kalimat_latih[0])
print('\n')
print(kalimat_test[0])

from tensorflow.keras.preprocessing.text import Tokenizer
from tensorflow.keras.preprocessing.sequence import pad_sequences
# mengonversi setiap kata dalam sebuah kalimat ke bilangan tertentu (tokenisasi) 
tokenizer = Tokenizer(num_words=10000, oov_token='*', 
                      filters='!"#$%&()*+,-./:;<=>?@[\\]^_`{|}~\t\n', lower=True,
                      split=' ', char_level=False)
tokenizer.fit_on_texts(kalimat_latih) 
tokenizer.fit_on_texts(kalimat_test)
# mengubah setiap kalimat dalam teks kita ke dalam sequence
sekuens_latih = tokenizer.texts_to_sequences(kalimat_latih)
sekuens_test = tokenizer.texts_to_sequences(kalimat_test)

# melihat kode angka untuk masing-masing kata
print(tokenizer.word_index)

# melihat kalimat yang telah ditokenisasi
print(tokenizer.texts_to_sequences(kalimat_latih[0]))
print('\n')
print(tokenizer.texts_to_sequences(kalimat_test[0]))

# menerapkan padding pada kalimat
padded_latih = pad_sequences(sekuens_latih,
                            padding='post',
                            maxlen=50,
                            truncating='post') 
padded_test = pad_sequences(sekuens_test,
                            padding='post',
                            maxlen=50,
                            truncating='post')

# melihat contoh kalimat yang telah dipadding
print(padded_latih[0])
print('\n')
print(padded_test[0])

# membuat model machine learningnya
import tensorflow as tf
from tensorflow.keras import regularizers
model = tf.keras.Sequential([
  # menerapkan embedding
  tf.keras.layers.Embedding(10000, 64), 
  # menggunakan 2 layer bidirectional LSTM
  tf.keras.layers.Bidirectional(tf.keras.layers.LSTM(64,  return_sequences=True)),
  tf.keras.layers.Bidirectional(tf.keras.layers.LSTM(32)),
  tf.keras.layers.Dropout(0.5),
  tf.keras.layers.Dense(512, activation='relu',
                        kernel_regularizer=regularizers.l2(0.00001)),
  tf.keras.layers.Dropout(0.5),
  tf.keras.layers.Dense(512, activation='relu',
                        kernel_regularizer=regularizers.l2(0.00001)),
  tf.keras.layers.Dropout(0.5),
  tf.keras.layers.Dense(1, activation='sigmoid')
])
# menerapkan dropout dan fungsi regularizers

# menggunakan optimizer RMSProp
from tensorflow.keras.optimizers import RMSprop
model.compile(loss=tf.keras.losses.BinaryCrossentropy(from_logits=True),
              optimizer=tf.keras.optimizers.RMSprop(
                  learning_rate=0.0001, rho=0.8, momentum=0.0, epsilon=1e-07, centered=True,
                  name='RMSprop'
              ),
              metrics=['accuracy'])

# menerapkan callback saat akurasi telah mencapai 90%
class myCallback(tf.keras.callbacks.Callback):
  def on_epoch_end(self, epoch, logs={}):
    if(logs.get('accuracy')>0.9):
      print("\nAkurasi telah mencapai >90%!")
      self.model.stop_training = True
callbacks = myCallback()

# pengujian model
num_epochs = 100
history = model.fit(padded_latih, label_latih, epochs=num_epochs, batch_size=512,
                    callbacks=[callbacks], validation_data=(padded_test, label_test), verbose=2)

import matplotlib.pyplot as plt

# membuat plot akurasi
acc = history.history['accuracy']
val_acc = history.history['val_accuracy']

plt.figure(figsize=(12, 12))
plt.subplot(2, 2, 3)
plt.plot(acc, label='Training Accuracy')
plt.plot(val_acc, label='Validation Accuracy')
plt.legend(loc='best')
plt.title('Grafik Accuracy')
plt.show()

# membuat plot loss
loss=history.history['loss']
val_loss=history.history['val_loss']

plt.figure(figsize=(6, 6))
plt.subplot(1, 1, 1)
plt.plot(loss, label='Training Loss')
plt.plot(val_loss, label='Validation Loss')
plt.legend(loc='best')
plt.title('Grafik Loss')
plt.show()